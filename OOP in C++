/* Object Oriented Programming in C++
 *      Structured programming:
 *          devide a program into functions and modules.
 *          eg. C++
 *      Procedural programming approach
 *          Top-down approach
 *          devide into functions performing specific tasks
 *          Drawback:
 *              data is not secured, bc data is global, can be accessed by any function
 *          Program control flow -> function calls and goto statements
 *          eg. FORTRAN, COBOL
 *          
 *  inheritance, hiding, polymorphism, packing (bind together the data and the functions)
 *
 *  Class: user-defined data type, data members and member functions
 *      used by creating an instance of that class
 *  Object: identifiable entity with some characteristics and behavior.
 *      an instance of a Class
 *      When class is defined, no memory is allocate but when it is instantiated, memory is allocated.
 *      Object can interact without having to know details of each other's data or code as long as it know passing value
 *      and return value.
 *   Encapsulation:
 *      binding together the data and the function that manipulate them
 *      Encapsulation lead to data abstraction or hiding (private).
 *   Abstract:
 *      Displaying only essential information and hiding the details.
 *      Physical level: how the records are stored - block of storage
 *      Logical level: data stored in the database and the relationship between the data
 *      View level: application programs hide details of data type and information for security purposes
 *          Data abstraction -> providing only essential information about the data to the outside world
 *          hiding the background details or implementation.
 *              Two types of abstraction:
 *                  using Classes: private, public
 *                  in header files
 *   Polymorphism:
 *     An operation may exhibit different behaviours in different instances.
 *     The behavior depends upon the types of data used in the operation.
 *      Overloading:
 *          Two types:
 *              Operator overloading
 *              Function overloading
 *   Inheritance:
 *      The capability of a class to derive properties and characteristics from another class
 *      Sub Class: inherit properties from another class
 *      Super Class (Base Class): whose properties are inherited by sub class
 *      Reusability: derive new class from the existing class, reuse the field and methods of the existing class
 *      Dynamic Binding: the code to be executed in response to function call is decided at runtime
 *      Message Passing: objects communicate with one another by sending and receiving information to each other
 *   Features of OOP:
 *      OOP treat data as a critical element
 *      emphasis is on data rather than procedure
 *      decomposition of the problem into simpler modules
 *      doesn't allow data to freely flow in the entire system
 *      data is preotected from external functions
 *   Advantages of OOPs
 *      models the real world
 *      programs are easy to understand and maintain
 *      offer code reusability
 *      parallel development of class
 *      easy to test, manage and debug
 *   Disadvantage
 *      class tend to be over-generalised
 *      relations among class become superficial
 *      design is tricky
 *
 * Class and object
 *  Defining class and declaring objects
 *      class className{...};
 *  Declaring Objects
 *      className objectName;
 *  Accessing data members and member functions
 *      obj.printName()
 *  Accessing Data Member:
 *      Depends on the access control of the data member, Access modifiers: public, private & protected
 *  Member functions in classes
 *      inside class definition:
 *          all the member functions defined inside the class definition are by default inline
 *          Inline functions: copy everywhere during compilation, like pre-processor macro
 *                            so the overhead of function calling is reduced
 *      outside class definition
 *      friend function: give private access to a non-member function
 *  Constructor: called by compiler when an object of that class is instantiated
 *      Default constructors
 *      Parametrized constructors
 *      Copy constructors: class-name(class-name &){}
 *
 */
/*
#include <bits/stdc++.h>
using namespace std;
class Geeks
{
public:
    int id;

    //Default Constructor
    Geeks()
    {
        cout << "Default Constructor called" << endl;
        id=-1;
    }

    //Parametrized Constructor
    Geeks(int x)
    {
        cout << "Parametrized Constructor called" << endl;
        id=x;
    }
};
int main() {

    // obj1 will call Default Constructor
    Geeks obj1;
    cout << "Geek id is: " <<obj1.id << endl;

    // obj1 will call Parametrized Constructor
    Geeks obj2(21);
    cout << "Geek id is: " <<obj2.id << endl;
    return 0;
}
*/

/*  Destructors:
 *      called by the compiler when the scope of the object ends
 * Access Modifiers
 *  Used for data hiding
 *  1. public: available to everyone, can be access from anywhere using direct member access operator obj.data
 *  2. private: default, can be accessed only by function or friend function inside the class
 *              private data member of a class can be indirectly access using public member function
 *  3. protected: similar to private, difference is:
 *                inaccessible outside the class
 *                but can be accessed by any subclass
 */
/*
#include <bits/stdc++.h>
using namespace std;

// base class
class Parent
{
    // protected data members
protected:
    int id_protected;

};

// sub class or derived class
class Child : public Parent
{


public:
    void setId(int id)
    {

        // Child class is able to access the inherited
        // protected data members of base class

        id_protected = id;

    }

    void displayId()
    {
        cout << "id_protected is: " << id_protected << endl;
    }
};

// main function
int main() {

    Child obj1;

    // member function of the derived class can
    // access the protected data members of the base class

    obj1.setId(81);
    obj1.displayId();
    return 0;
}
*/
/* Inheritance
 *
 *
 * */
