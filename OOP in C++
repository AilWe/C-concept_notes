/* Object Oriented Programming in C++
 *      Structured programming:
 *          devide a program into functions and modules.
 *          eg. C++
 *      Procedural programming approach
 *          Top-down approach
 *          devide into functions performing specific tasks
 *          Drawback:
 *              data is not secured, bc data is global, can be accessed by any function
 *          Program control flow -> function calls and goto statements
 *          eg. FORTRAN, COBOL
 *          
 *  inheritance, hiding, polymorphism, packing (bind together the data and the functions)
 *
 *  Class: user-defined data type, data members and member functions
 *      used by creating an instance of that class
 *  Object: identifiable entity with some characteristics and behavior.
 *      an instance of a Class
 *      When class is defined, no memory is allocate but when it is instantiated, memory is allocated.
 *      Object can interact without having to know details of each other's data or code as long as it know passing value
 *      and return value.
 *   Encapsulation:
 *      binding together the data and the function that manipulate them
 *      Encapsulation lead to data abstraction or hiding (private).
 *   Abstract:
 *      Displaying only essential information and hiding the details.
 *      Physical level: how the records are stored - block of storage
 *      Logical level: data stored in the database and the relationship between the data
 *      View level: application programs hide details of data type and information for security purposes
 *          Data abstraction -> providing only essential information about the data to the outside world
 *          hiding the background details or implementation.
 *              Two types of abstraction:
 *                  using Classes: private, public
 *                  in header files
 *   Polymorphism:
 *     An operation may exhibit different behaviours in different instances.
 *     The behavior depends upon the types of data used in the operation.
 *      Overloading:
 *          Two types:
 *              Operator overloading
 *              Function overloading
 *   Inheritance:
 *      The capability of a class to derive properties and characteristics from another class
 *      Sub Class: inherit properties from another class
 *      Super Class (Base Class): whose properties are inherited by sub class
 *      Reusability: derive new class from the existing class, reuse the field and methods of the existing class
 *      Dynamic Binding: the code to be executed in response to function call is decided at runtime
 *      Message Passing: objects communicate with one another by sending and receiving information to each other
 *   Features of OOP:
 *      OOP treat data as a critical element
 *      emphasis is on data rather than procedure
 *      decomposition of the problem into simpler modules
 *      doesn't allow data to freely flow in the entire system
 *      data is preotected from external functions
 *   Advantages of OOPs
 *      models the real world
 *      programs are easy to understand and maintain
 *      offer code reusability
 *      parallel development of class
 *      easy to test, manage and debug
 *   Disadvantage
 *      class tend to be over-generalised
 *      relations among class become superficial
 *      design is tricky
 *
 * Class and object
 *  Defining class and declaring objects
 *      class className{...};
 *  Declaring Objects
 *      className objectName;
 *  Accessing data members and member functions
 *      obj.printName()
 *  Accessing Data Member:
 *      Depends on the access control of the data member, Access modifiers: public, private & protected
 *  Member functions in classes
 *      inside class definition:
 *          all the member functions defined inside the class definition are by default inline
 *          Inline functions: copy everywhere during compilation, like pre-processor macro
 *                            so the overhead of function calling is reduced
 *      outside class definition
 *      friend function: give private access to a non-member function
 *  Constructor: called by compiler when an object of that class is instantiated
 *      Default constructors
 *      Parametrized constructors
 *      Copy constructors: class-name(class-name &){}
 *
 */
/*
#include <bits/stdc++.h>
using namespace std;
class Geeks
{
public:
    int id;

    //Default Constructor
    Geeks()
    {
        cout << "Default Constructor called" << endl;
        id=-1;
    }

    //Parametrized Constructor
    Geeks(int x)
    {
        cout << "Parametrized Constructor called" << endl;
        id=x;
    }
};
int main() {

    // obj1 will call Default Constructor
    Geeks obj1;
    cout << "Geek id is: " <<obj1.id << endl;

    // obj1 will call Parametrized Constructor
    Geeks obj2(21);
    cout << "Geek id is: " <<obj2.id << endl;
    return 0;
}
*/

/*  Destructors:
 *      called by the compiler when the scope of the object ends
 * Access Modifiers
 *  Used for data hiding
 *  1. public: available to everyone, can be access from anywhere using direct member access operator obj.data
 *  2. private: default, can be accessed only by function or friend function inside the class
 *              private data member of a class can be indirectly access using public member function
 *  3. protected: similar to private, difference is:
 *                inaccessible outside the class
 *                but can be accessed by any subclass
 */
/*
#include <bits/stdc++.h>
using namespace std;

// base class
class Parent
{
    // protected data members
protected:
    int id_protected;

};

// sub class or derived class
class Child : public Parent
{


public:
    void setId(int id)
    {

        // Child class is able to access the inherited
        // protected data members of base class

        id_protected = id;

    }

    void displayId()
    {
        cout << "id_protected is: " << id_protected << endl;
    }
};

// main function
int main() {

    Child obj1;

    // member function of the derived class can
    // access the protected data members of the base class

    obj1.setId(81);
    obj1.displayId();
    return 0;
}
*/
/* Inheritance
 *  Implementing inheritance
 *      class subName: accessMode baseName{
 *      ...
 *      };
 *  Mode of Inheritance
 *      Public mode: Public member (father) -> public (child); Protected (father) -> protected (child)
 *      Protected mode: public + protected -> protected
 *      Private: public + protected -> private
 *  Types of inheritance
 *      Single inheritance
 *      Multiple inheritance: inherit from more than one classes
 *      Multilevel inheritance: a derived class is created from another derived class
 *      Hierarchical inheritance
 *      Hybrid inheritance
 *      Multipath inheritance: two base classes have one common base class -> ambiguity
 *                             specify the path
 *          2 way to avoid ambiguity:
 *              1. scope resolution operator
 *                  obj.ClassB::a = 10;
 *                  obj.ClassC::a = 100;
 *              2. virtual base class
 *                  class ClassB: virtual public ClassA
 * Polymorphism
 *  Two types:
 *      Compile time polymorphism
 *          Function overloading
 *              Multiple functions with same name but different parameters (number & type)
 *          Operator overloading
 *
 *      Run time polymorphism
 *          virtual functions: subclass initialization
 */
/*#include <bits/stdc++.h>
using namespace std;

class base
{
public:
    virtual void print ()
    { cout<< "print base class" <<endl; }

    void show ()
    { cout<< "show base class" <<endl; }
};

class derived:public base
{
public:
    void print () //print () is already virtual function in derived class, we could also declared as virtual void print () explicitly
    { cout<< "print derived class" <<endl; }

    void show ()
    { cout<< "show derived class" <<endl; }
};

//main function
int main()
{
    base *bptr;
    derived d;
    bptr = &d;

    //virtual function, binded at runtime (Runtime polymorphism)
    bptr->print();

    // Non-virtual function, binded at compile time
    bptr->show();

    return 0;
}
//print derived class
//show base class
*/
/* Encapuslation:
 *  private data member
 *  public member function to manipulate private data member
 * Abstract:
 *  Two types:
 *      using classes
 *      in header files
 *      using access specifier
 *  Advantages:
 *      avoid writing the low level code
 *      avoid code duplication and increase reusability
 *      change internal implementation of class independently without affecting the user
 *      increase security of an application
 * Structure vs class
 *  Most importance difference is security
 *  1. class: members are private by default; structure: members are public by default
 *  2. deriving: deriving a struct from a class/struct, default access is public
 *               deriving a class, default acess specifier is private
 * Class have an object of self type
 *  A class can have a static member of self type
 *      static variable do not contribute to the size of object.
 *      So, no problem in calculating size with static variable of self type
 *  A class can have a pointer to self type
 *      For a compiler, all pointer have a fixed size
 *  A class cannot have a non-static object of self type
 * Size of an empty class != 0
 *  Size of an empty class is not zero, it is 1 byte.
 *  It is nonzero to ensure that the two different objects will have different addresses
 *  new operator returns pointers to distinct objects
 *  An empty base class needn't be represented by a separate byte, so compiler are free to make optimization for empty base class.
 *
 * Static data members
 *  Static members are only declared in class declaration, not defined.
 *  They must be explicitly defined outside the class using scope resolution operator
 *  Static members are shared among all objects (known as class members or class field)
 * Static member functions
 *  Static member functions fo not have this pointer
 *  Static member function cannot be virtual
 *  Member function declaration with the same name and the name parameter-type-list cannot be overloaded
 *  A static member function can not be declared const, volatile or const volatile
 *
 */
/*#include <iostream>
using namespace std;

class A
{
public:
    A() { cout << "A's Constructor Called " << endl;  }
};

class B
{
    static A a;
public:
    B() { cout << "B's Constructor Called " << endl; }
};

int main()
{
    B b;
    return 0;
}
 // Only B's constructor called
*/
/*
#include <iostream>
using namespace std;

class A
{
    int x;
public:
    A() { cout << "A's constructor called " << endl;  }
};

class B
{
    static A a;
public:
    B() { cout << "B's constructor called " << endl; }
    static A getA() { return a; }
};

int main()
{
    B b;
    A a = b.getA();
    return 0;
}
 // undefined reference to `B::a'
*/
/* Friend class and function
 *  can access private and protected members of other class
 *  Useful to allow a particular class to access private members of other class
 *  Two types of friend function:
 *      A method of another class
 *      A global function
 *   Friendship is not mutual
 *   Friendship is not inherited
 * Local classes: A class declare inside a function becomes local to that function
 *  A local class type name can only be used in the enclosing function
 *  All the methods of local classes must be defined inside the class
 *  A local class cannot contain static data members.
 *  It may contain static functions.
 *  Member methods of local class can only access static and enum variables of the enclosing function.
 *  Non-static variables of the enclosing function are not accessible inside local classes.
 *  Local classes can access global types, variables and functions.
 *
 * Nested classes: a class is declared in another enclosing class
 *  The members of an enclosing class have no special access to members of a nested class; the usual access rules shall be obeyed.
 *
 * Simulating final class (a class can't be inherited)
 *
 * */
/* A program with compilation error to demonstrate that Final class cannot
   be inherited */
#include<iostream>
using namespace std;

class Final;  // The class to be made final

class MakeFinal // used to make the Final class final
{
private:
    MakeFinal() { cout << "MakFinal constructor" << endl; }
    friend class Final;
};

class Final : virtual MakeFinal
{
public:
    Final() { cout << "Final constructor" << endl; }
};

class Derived : public Final // Compiler error
{
public:
    Derived() { cout << "Derived constructor" << endl; }
};

int main(int argc, char *argv[])
{
    Derived d;
    return 0;
}
//erived‘s constructor directly invokes MakeFinal’s constructor, and the constructor of MakeFinal is private
// compilation error
/* A program without any compilation error to demonstrate that instances of
   the Final class can be created */
#include<iostream>
using namespace std;

class Final;

class MakeFinal
{
private:
    MakeFinal() { cout << "MakeFinal constructor" << endl; }
    friend class Final;
};

class Final : virtual MakeFinal
{
public:
    Final() { cout << "Final constructor" << endl; }
};

int main(int argc, char *argv[])
{
    Final f;
    return 0;
}
// This code compile and runs fine
//Output: MakeFinal constructor
//    Final constructor
