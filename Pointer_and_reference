#include <iostream>
/* Pointer
 * & (ampersand) return the address of variable -> reference
 * * (asterisk) declare a pointer variable -> dereference
 * Pointer arithmetic operation: ++, --, + or +=, - or -=
 * Pointers and multidimensional arrays
 *  2D array nums: nums[i][j] -> *(*(nums+i)+j)
 *  *(*nums): nums[0][0]
 *  *(*nums + 1): nums[0][1]
 *  *(*nums + 2): nums[0][2]
 *  *(*(nums + 1)): nums[1][0]
 *  *(*(nums + 1) + 1): nums[1][1]
 *  *(*(nums + 1) + 2): nums[1][2]
 *
 *
 *
 */
/* What is array decay in C++?
 *  The loss of type and dimensions of an array
 *  Occurs when we pass the array into function by value or pointer
 *
 */
/*

// C++ code to demonstrate array decay
#include<iostream>
using namespace std;

// Driver function to show Array decay
// Passing array by value
void aDecay(int *p)
{
    // Printing size of pointer
    cout << "Modified size of array is by "
            " passing by value: ";
    cout << sizeof(p) << endl;
}

// Function to show that array decay happens
// even if we use pointer
void pDecay(int (*p)[7])
{
    // Printing size of array
    cout << "Modified size of array by "
            "passing by pointer: ";
    cout << sizeof(p) << endl;
}

int main()
{
    int a[7] = {1, 2, 3, 4, 5, 6, 7,};

    // Printing original size of array
    cout << "Actual size of array is: ";
    cout << sizeof(a) <<endl;

    // Calling function by value
    aDecay(a);

    // Calling function by pointer
    pDecay(&a);

    return 0;
}
 //By calling by value and pointer, array decays into pointer and prints the size of 1 pointer
 * How to prevent array decay
 *  Pass size of array also as a parameter and not use sizeof on array parameter
 *  Send the array into functions by reference. This prevents conversion of array into a pointer, hence prevents the decay.
 * // C++ code to demonstrate prevention of
// decay of array
#include<iostream>
using namespace std;

// A function that prevents Array decay
// by passing array by reference
void fun(int (&p)[7])
{
    // Printing size of array
    cout << "Modified size of array by "
            "passing by reference: ";
    cout << sizeof(p) << endl;
}

int main()
{
    int a[7] = {1, 2, 3, 4, 5, 6, 7,};

    // Printing original size of array
    cout << "Actual size of array is: ";
    cout << sizeof(a) <<endl;

    // Calling function by reference
    fun(a);

    return 0;
}
 //Size in both cases is 28.
 */
/* Opaque pointer
 *  A pointer which points to a data structure whose contents are not exposed at the time of its definition
 *      eg. struct Stest *pStest;
 *  It is safe to assign NULL to an opaue pointer
 *  pSTest = NULL;
 *  Why?
 *   Dealing with shared code
 *
 *
 */
/* References
 *  alternative name for an existing variable
 *  application:
 *      Modify the passed parameter in a function
 *      Avoiding copy of large structure
 *      In for each loop to modify all objects
 *      Question:
 *          auto: the type of variable declared automatically deduced from initializer or return value/
 * References vs pointers
 *  A pointer can be declared as void but a reference can never be void
 *  Reference are less powerful than pointers
 *      Once a reference is created, it cannot be reseated
 *      References cannot be NULL
 *      A reference must be initialized when declared
 *  References are safer and easier to use:
 *      Reference must be initialized, wild reference are unlikely to exist
 *      Reference don't need dereferencing operator to access the value
 *      object reference access with "."; pointers access with "->"
 */
/* Reference refer to invalid location in C++?
 *  1) Reference to value at uninitialized pointer
 *      int *ptr;
        int &ref = *ptr;
 *  2) Reference to a local variable is returned
 *      int &fun()
 *      {
 *      int a = 10;
 *      return a;
 *      }
 *      Once fun() return, the space allocated to it on stack frame will be taken back.
 *      So the reference to a local variable will not be valid.
 */
/* When to pass arguments by &
 *   By passing reference:
 *      1) To modify local variables of the caller function:
 *      A reference allows called function to modify a local variable of the caller function.
        void fun(int &x) {
            x = 20;
        }

        int main() {
            int x = 10;
            fun(x);
            cout<<"New value of x is "<<x;
            return 0;
        }
 *
 *      2) For passing large sized argument (only valid for struct and class variables)
 *          If an argument is large, passing by reference is more efficient bc only address is passed, not the entire obj
 *          void printEmpDetails(const Employee &emp) {
                cout<<emp.getName();
                cout<<emp.getDesig();

                // Print more attributes
            }
 *      3) To avoid obj slicing (only valid for struct and class):
 *          If pass by value, pass an object of subclass to a function, the object of superclass will passed a slice the obj
 *          #include <iostream>
            #include<string>

            using namespace std;

            class Pet {
            public:
                virtual string getDescription() const {
                    return "This is Pet class";
                }
            };

            class Dog : public Pet {
            public:
                virtual string getDescription() const {
                    return "This is Dog class";
                }
            };

            void describe(Pet p) { // Slices the derived class object
                cout<<p.getDescription()<<endl;
            }

            int main() {
                Dog d;
                describe(d);
                return 0;
            }
            //Output: This is Pet Class
            void describe(const Pet &p) { // Doesn't slice the derived class object.
            cout<<p.getDescription()<<endl;
            }
 *          //Output: This is Dog Class
 *          4) To acheive Run time polymorphism in a function
 */
/* Smart Pointers
 *  Pointers are used for accessing the resources which are external to the program like heap
 *  Problem with normal pointer
 *
#include <iostream>
using namespace std;

class Rectangle {
private:
    int length;
    int breadth;
};

void fun()
{
    // By taking a pointer p and
    // dynamically creating object
    // of class rectangle
    Rectangle* p = new Rectangle();
}

int main()
{
    // Infinite Loop
    while (1) {
        fun();
    }
}
 * Once the function ends this 'p' is deleted, bc this 'p' is a local variable to the function. however, the new rectangular
 * is new, allocated inside heap, the information in heap will not be deallocated -> memory leak from heap memory
 * Smart pointers: automatically manage memory and they will deallocate the object when theare not in use, when the pointer is going
 * out of scope automatically, it will deallocate the memory
 *  A smart pointer is a wrapper class over a pointer with an operator like * and -> overloaded.
 *  #include <iostream>
using namespace std;

class SmartPtr {
    int* ptr; // Actual pointer
public:
    // Constructor: Refer https:// www.geeksforgeeks.org/g-fact-93/
    // for use of explicit keyword
    explicit SmartPtr(int* p = NULL) { ptr = p; }

    // Destructor
    ~SmartPtr() { delete (ptr); }

    // Overloading dereferencing operator
    int& operator*() { return *ptr; }
};

int main()
{
    SmartPtr ptr(new int());
    *ptr = 20;
    cout << *ptr;

    // We don't need to call delete ptr: when the object
    // ptr goes out of scope, the destructor for it is automatically
    // called and destructor does delete ptr.

    return 0;
}
 * #include <iostream>
using namespace std;

// A generic smart pointer class
template <class T>
class SmartPtr {
    T* ptr; // Actual pointer
public:
    // Constructor
    explicit SmartPtr(T* p = NULL) { ptr = p; }

    // Destructor
    ~SmartPtr() { delete (ptr); }

    // Overloading dereferncing operator
    T& operator*() { return *ptr; }

    // Overloading arrow operator so that
    // members of T can be accessed
    // like a pointer (useful if T represents
    // a class or struct or union type)
    T* operator->() { return ptr; }
};

int main()
{
    SmartPtr<int> ptr(new int());
    *ptr = 20;
    cout << *ptr;
    return 0;
}
 *  Types of smart pointer
 *      auto_ptr: manages an object obtained via new expression and deletes that object when auto_ptr itself is destroyed.
 *          auto_ptr do not acutally copy the stored pointer instead they transfer it, leaving the first auto_ptr obj empty
 *          so that only one auto_ptr obj can own the pointer at any given time
 *          It can't be used within STL containers
 *      unique_ptr: developed in c++11 as a replacement for std::auto_ptr. Improved security. It is a container for raw pointer.
 *          pointing to one only.
 *          Any attempt to make a copy of unique_ptr will cause a compile-time error
 *          unique_ptr can be moved using the new move semantics, using std::move() funcion to transfer ownership of the contained pointer to another unique_ptr
 *          It is best to use unique_ptr when we want a single pointer to an object
 *          Use unique_ptr when you want to have single ownership (exclusive) of the resource
 *          unique_ptr<A> fun()
            {
                unique_ptr<A> ptr(new A);

                 ...
                   ...

            return ptr;
            }
 *      shared_ptr: more than one pointer can point to this obj at a time
 *          Reference counting ownership model.
 *          The counter is incremented each time when a new pointer points to the resource
 *          and decremented when the destructor of the obj is called
 *          Reference counting:
 *              A technique of storing the number of reference, pointers or handles to a resources
 *              We should use shared_ptr when we want to assign one raw pointer to multiple owners
 *              // C++ program to demonstrate shared_ptr
                #include <iostream>
                #include <memory>
                using namespace std;

                class A {
                public:
                    void show()
                    {
                        cout << "A::show()" << endl;
                    }
                };

                int main()
                {
                    shared_ptr<A> p1(new A);
                    cout << p1.get() << endl;
                    p1->show();
                    shared_ptr<A> p2(p1);
                    p2->show();
                    cout << p1.get() << endl;
                    cout << p2.get() << endl;

                    // Returns the number of shared_ptr objects
                    // referring to the same managed object.
                    cout << p1.use_count() << endl;
                    cout << p2.use_count() << endl;

                    // Relinquishes ownership of p1 on the object
                    // and pointer becomes NULL
                    p1.reset();
                    cout << p1.get() << endl;
                    cout << p2.use_count() << endl;
                    cout << p2.get() << endl;

                    return 0;
                }
 *      weak_ptr:A copy to shared_ptr
 *              it is not maintain a reference counter. THis reason is if suppose pointer are holding the obejct and requesting for other obj
 *              they may form a Deadlock.
 *              The existence or destruction of weak_ptr has no effect on the shared_ptr or its other copies
 *              It is required in some cases to break circular reference between shared_ptr instances.
 *              Cyclic dependency: two classes A and B, both have pointers to other classes, use_count will never reach zero and they never deleted (Dead lock)
 *              When you do want to refer to your obj from multiple places, for those references for which it is ok to ignore and deallocate.
 */
/* 'this' pointer in C++
 *      Each object gets its own copy of the data member
 *      All-access the same function definition as present in the code segment
 *      How member function is used by multiple objects. That is why we use 'this' pointer.
 *      'this' pointer is passed as a hidden argument to all nonstatic member function calls and is available as a local
 *      variable within the body of all nonstatic functions.
 *      'this' pointer is not available in static member functions,
 *      as static member functions can be called without any object (with class name).
 *      For a class X, the type of this pointer is 'X*'. It also support 'const X *'.
 *      C++ lets object destroy themselves by calling  delete this;
 *      1) When local variable's name is same as member's name
         using namespace std;
        class Test
        {
        private:
            int x;
        public:
            void setX (int x)
            {
                // The 'this' pointer is used to retrieve the object's x
                // hidden by the local variable 'x'
                this->x = x;
            }
            void print() { cout << "x = " << x << endl; }
        };
*
 *      2) To return reference to the calling object
 *          Test& Test::func ()
            {
               // Some processing
               return *this;
            }
 */
/*
 * #include<iostream>
using namespace std;

class Test
{
private:
    int x;
    int y;
public:
    Test(int x = 0, int y = 0) { this->x = x; this->y = y; }
    void fun1() { cout << "Inside fun1()"; }
    void fun2() { cout << "Inside fun2()"; this->fun1(); }
};

int main()
{
    Test obj;
    obj.fun2();
    return 0;
}

#include<iostream>
using namespace std;

class Test
{
private:
    int x;
    int y;
public:
    Test (int x = 0, int y = 0) { this->x = x; this->y = y; }
    Test &setX(int a) { x = a; return *this; }
    Test &setY(int b) { y = b; return *this; }
    void print() { cout << "x = " << x << " y = " << y << endl; }
};

int main() {
    Test obj1;
    obj1.setX(10).setY(20);
    obj1.print();
    return 0;
}

#include<iostream>
using namespace std;

class Test
{
private:
    int x;
    int y;
public:
    Test(int x = 0, int y = 0) { this->x = x; this->y = y; }
    Test &setX(int a) { x = a; return *this; }
    Test &setY(int b) { y = b; return *this;}
    void destroy()  { delete this; }
    void print() { cout << "x = " << x << " y = " << y << endl; }
};

int main()
{
    Test obj;
    obj.setX(10).setY(20);
    obj.destroy();
    obj.print();
    return 0;
}


#include<iostream>
using namespace std;

class Test
{
private:
    int x;
public:
    Test(int x = 0) { this->x = x; }
    int change(int *t){this -> x = *t; return 0;}
    void print() { cout << "x = " << x << endl; }
};

int main()
{
    Test obj(5);
    int *ptr = new int (10);
    obj.change(ptr);
    obj.print();
    return 0;
}
 */
/* Type of 'this' pointer
 *  this pointer is passed as a hidden argument to all non-static member function calls
 *  If the member function of a class X is declared as const, the type of this is const X*
 *  If the member function is declared as volatile, the type of this is volatile *X
 *  class X {
   void fun() const {

    // this is passed as hidden argument to fun().
    // Type of this is const X* const
    }
};
 #include<iostream>
class X {
   void fun() volatile {

     // this is passed as hidden argument to fun().
     // Type of this is volatile X* const
    }
};
 #include<iostream>
class X {
   void fun() const volatile {

     // this is passed as hidden argument to fun().
     // Type of this is const volatile X* const
    }
};

 *  delete this
 *      1) delete operator works only for objects allocated with 'new', otherwise it is an undefined.
 *      2) Once delete this is done, any member should not access the deleted object after deletion.
 *
 */
/* dangling, void, NULL and wild pointers
 *  Dangling pointer:
 *      A pointer pointing to a memory location that has been deleted (or freed)
 *      Three ways:
 *          De-allocation of memory
 *          // Deallocating a memory pointed by ptr causes
            // dangling pointer
            #include <stdlib.h>
            #include <stdio.h>
            int main()
            {
                int *ptr = (int *)malloc(sizeof(int));

                // After below free call, ptr becomes a
                // dangling pointer
                free(ptr);

                // No more a dangling pointer
                ptr = NULL;
            }
 *          Function call when local variable is not static
     *      // The pointer pointing to local variable becomes
            // dangling when local variable is not static.
            #include<stdio.h>

            int *fun()
            {
                // x is local variable and goes out of
                // scope after an execution of fun() is
                // over.
                int x = 5;

                return &x;
            }

            // Driver Code
            int main()
            {
                int *p = fun();
                fflush(stdin);

                // p points to something which is not
                // valid anymore
                printf("%d", *p);
                return 0;
            }
            //A garbage Address
 *
 *
 *          Variable goes out of scope:
 *          void main()
            {
               int *ptr;
               .....
               .....
               {
                   int ch;
                   ptr = &ch;
               }
               .....
               // Here ptr is dangling pointer
            }
 * Void pointer
 *  A pointer that points to some data location in storage, which does not have any specific type.
 *  Any pointer type is convertible to a void pointer hence it can point to any value.
 *      Void pointer cannot be dereferenced.
 *      Pointer arithmetic is not possible on pointers of void due to lack of concrete value and size
 *      #include<stdlib.h>
          int main()
        {
            int x = 4;
            float y = 5.5;

            //A void pointer
            void *ptr;
            ptr = &x;

            // (int*)ptr - does type casting of void
            // *((int*)ptr) dereferences the typecasted
            // void pointer variable.
            printf("Integer variable is = %d", *( (int*) ptr) );

            // void pointer is now float
            ptr = &y;
            printf("\nFloat variable is= %f", *( (float*) ptr) );

            return 0;
        }
 *
 * NULL pointer
 *  A pointer points to nothing.
 *      NULL vs uninitialized pointer - an initialized pointer stores an undefined value.
 *      A null pointer stores a defined value.
 *      NULL vs void pointer - NULL pointer is a value, while void pointer is a type
 * Wild pointer
 *  A pointer has not been initialized to anything (not even NULL)
 */
/* Passing by pointer vs passing by reference
 *  A pointer can be declared as void but a reference can never be void
 *  Reference are less powerful than pointers
 *      Once a reference is created, it cannot be reseated
 *      References cannot be NULL
 *      A reference must be initialized when declared
 *  References are safer and easier to use:
 *      Reference must be initialized, wild reference are unlikely to exist
 *      Reference don't need dereferencing operator to access the value
 *      object reference access with "."; pointers access with "->"
 *      // C++ program to demonstrate differences between pointer
        // and reference.
        #include <iostream>
        using namespace std;

        struct demo
        {
            int a;
        };

        int main()
        {
            int x = 5;
            int y = 6;
            demo d;

            int *p;
            p =  &x;
            p = &y;                     // 1. Pointer reintialization allowed
            int &r = x;
            // &r = y;                  // 1. Compile Error
            r = y;                      // 1. x value becomes 6

            p = NULL;
            // &r = NULL;               // 2. Compile Error

            p++;                        // 3. Points to next memory location
            r++;                        // 3. x values becomes 7

            cout << &p << " " << &x << endl;    // 4. Different address
            cout << &r << " " << &x << endl;    // 4. Same address

            demo *q = &d;
            demo &qq = d;

            q->a = 8;
            // q.a = 8;                 // 5. Compile Error
            qq.a = 8;
            // qq->a = 8;               // 5. Compile Error

            cout << p << endl;        // 6. Prints the address
            cout << r << endl;        // 6. Print the value of x

            return 0;
        }
        Pointer: a variable that holds memory address of another variable, need * to dereference
        Reference: an alias, another name for an already existing variable, can be thought as a constant pointer0
        Initialization: & need be initialization
        Reassignment: A pointer can be reassigned, a reference cannot.
        Memory address: A pointer has its own memory address and size on the stack whereas a reference shares the same
                        memory address (with the original variable) but also takes up some space on the stack.
        NULL value: Pointer can be assigned NULL directly, whereas reference cannot.
        Indirection:* to pointers offering extra levels of indirection.
                    & only offer one level of indirection
        Arithmetic operations: various arithmetic operations can be performed on pointer but no reference arithmetic
 */
/* NaN in C++
 *  An expression results in a number that cannot be represented, ex sqrt of negative number
 *      Check for NaN
 *          "==" operator: if true, not a complex, if a false, it is a complex number
 *          isnan(): return true if a number is complex
 */
/* nullptr:
 *  NULL is typically defined as (void*), so the function call(NULL) is ambiguous.
 *  if we replace NULL with nullptr.
 *  Like NULL, nullptr is implicitly convertible and comparable to any pointer type.
 *  Unlike NULL, it is not implicitly convertible or comparable to integral types.
 *  nullptr is convertible to bool
            // C++ program to demonstrate problem with NULL
            #include <bits/stdc++.h>
            using namespace std;

            // function with integer argument
            int fun(int N)   { cout << "fun(int)"; }

            // Overloaded function with char pointer argument
            int fun(char* s)  { cout << "fun(char *)"; }

            int main()
            {
                // Ideally, it should have called fun(char *),
                // but it causes compiler error.
                fun(NULL);//error: call of overloaded 'fun(NULL)' is ambiguous
            //
                fun(nullptr);// fun(char*)
             }
            //////////////////////program2
             // This program compiles
            #include<iostream>
            using namespace std;

            int main()
            {
               int *ptr = nullptr;

               // Below line compiles
               if (ptr) { cout << "true"; }
               else { cout << "false"; }
            }
            for two nullptr_t, <= and >=, == return true
            < and >, != return false
 */
