/*
 * Queue in STL
 *  First in first out. Elements are inserted at the back and are deleted form the front.
 *  .empty(): return whether the queue is empty
 *  .size(): return the size of the queue
 *  .swap(): exchange the contents of two queue but the queues must be of same type, although sizes may different
 *  .emplace(): insert a new element into the queue containers, the new element is added to the end of the queue
 *  .front() and . back(): return a reference to the first and last element of the queue, respectively
 *  .push(value): add the value at the end of the queue.
 *  .pop():deletes the first element of the queue
 */
// CPP code to illustrate
// Queue in Standard Template Library (STL)
#include <iostream>
#include <queue>

using namespace std;

// Print the queue
void showq(queue <int> gq)
{
    queue <int> g = gq;
    while (!g.empty())
    {
        cout << '\t' << g.front();
        g.pop();
    }
    cout << '\n';
}

// Driver Code
int main()
{
    queue <int> gquiz;
    gquiz.push(10);
    gquiz.push(20);
    gquiz.push(30);

    cout << "The queue gquiz is : ";
    showq(gquiz);

    cout << "\ngquiz.size() : " << gquiz.size();
    cout << "\ngquiz.front() : " << gquiz.front();
    cout << "\ngquiz.back() : " << gquiz.back();

    cout << "\ngquiz.pop() : ";
    gquiz.pop();
    showq(gquiz);

    // We can also use front and back as
    // iterators to traverse through the queue
    cout<<"Using iterators : ";
    for(auto i = gquiz.front(); i != gquiz.back(); i++)
    {
        cout<< i <<" ";
    }
    return 0;
}
//The queue gquiz is :    10      20      30
//
//gquiz.size() : 3
//gquiz.front() : 10
//gquiz.back() : 30
//gquiz.pop() :   20      30
//Using iterators : 20 21 22 23 24 25 26 27 28 29 -> the iterators are wrong
