/* Vector in C++ STL
 *  Inserting at the end takes differential time -> Maybe a need of extending the array
 *  Removing the last element takes only constant time -> no resizing happens
 *  Inserting and erasing at the beginning or in the middle is linear in time
 *  Main functions:
 *      Iterators:
 *          begin(): returns an iterator pointing to the first element in the vector
 *          end(): returns an iterator pointing to the theoretical element following the last element
 *          rbegin(): returns a reverse iterator pointing to the last element in the vector (last -> first)
 *          rend(): returns a reverse iterator pointing to the theoretical element preceding the first element
 *          cbegin(): returns a constant iterator pointing to the first element
 *          cend(): returns an constant iterator pointing to the theoretical element following the last element
 *          crbegin(): returns a constant reverse iterator pointing to the last element in the vector
 *          crend(): returns a constant reverse iterator pointing to the theoretical element preceding the first element in the vector
 *      Capacity:
 *          size(): returns the number of element
 *          max_size(): returns the maximum number of element that the vector can hold
 *          capacity(): returns the size of the storage space currently allocated to the vector (number of element)
 *          resize(n): resize the container
 *          empty(): return bool whether the container is empty
 *          shrink_to_fit(): reduce the capacity of container to fit its size and destroys all elements beyong the capacity
 *          reverse(): request the vector capacity be at least enough to contain n elements
 *      Element access:
 *          reference operator [g]: return a reference to the element at position 'g' in the vector
 *          at(g): return a reference to the element at position 'g'
 *          front(): returns a reference to the first element
 *          back(): returns a reference to the last element
 *          data(): returns a direct pointer to the memory array used by internally to store its owned element
 *      Modifier:
 *          assign(): it assign new value to the vector element by replacing old ones
 *          push_back(): it push the elements from the back
 *          pop_back(): pop or remove elements from the back
 *          insert(): insert new element before the element
 *          erase(): remove element form a container from the specified position or range
 *          swap(): swap the container of two same type vector. Size may differ
 *          clear(): remove all element of the vector container
 *          emplace(): extend the container by inserting new element at position
 *          emplace_back(): insert new element to the end of the vector
 */
/*
#include <bits/stdc++.h>
#include <vector>
using namespace std;

int main()
{
    // Assign vector
    vector<int> v;

    // fill the array with 10 five times
    v.assign(5, 10);

    cout << "The vector elements are: ";
    for (int i = 0; i < v.size(); i++)
        cout << v[i] << " ";

    // inserts 15 to the last position
    v.push_back(15);
    int n = v.size();
    cout << "\nThe last element is: " << v[n - 1];

    // removes last element
    v.pop_back();

    // prints the vector
    cout << "\nThe vector elements are: ";
    for (int i = 0; i < v.size(); i++)
        cout << v[i] << " ";

    // inserts 5 at the beginning
    v.insert(v.begin(), 5);

    cout << "\nThe first element is: " << v[0];

    // removes the first element
    v.erase(v.begin());

    cout << "\nThe first element is: " << v[0];

    // inserts at the beginning
    v.emplace(v.begin(), 5);
    cout << "\nThe first element is: " << v[0];

    // Inserts 20 at the end
    v.emplace_back(20);
    n = v.size();
    cout << "\nThe last element is: " << v[n - 1];

    // erases the vector
    v.clear();
    cout << "\nVector size after erase(): " << v.size();

    // two vector to perform swap
    vector<int> v1, v2;
    v1.push_back(1);
    v1.push_back(2);
    v2.push_back(3);
    v2.push_back(4);

    cout << "\n\nVector 1: ";
    for (int i = 0; i < v1.size(); i++)
        cout << v1[i] << " ";

    cout << "\nVector 2: ";
    for (int i = 0; i < v2.size(); i++)
        cout << v2[i] << " ";

    // Swaps v1 and v2
    v1.swap(v2);

    cout << "\nAfter Swap \nVector 1: ";
    for (int i = 0; i < v1.size(); i++)
        cout << v1[i] << " ";

    cout << "\nVector 2: ";
    for (int i = 0; i < v2.size(); i++)
        cout << v2[i] << " ";
}
*/
